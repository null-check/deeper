import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def SEPARATOR = '--------------------'
def branchName = System.getProperty('branchName', project.getProperties().get('branchName', ''))
def commitHash
def buildTime = (new SimpleDateFormat("dd-MMM-yyyy hh:mm aa")).format(new Date())

// RATIONALE: XX MM VV A PPP
// XX -> BUILD TOOL VERSION
// MM -> MIN SDK SUPPORT
// VV -> MAJOR APP VERSION
//  A -> MINOR APP VERSION
// PP -> PATCH VERSION
// eg. (281601201) -> BUILD TOOLS: 28 | MIN SDK VER: 16 | MAJOR APP VER: 01 | MINOR APP VERSION: 3 | PATCH VERSION: 00
def appVersionCode = 281601300
def appVersionName = "1.3.1"
def final defaultApplicationId = "com.arjun.deeper"
def final defaultAppName = "9 Squares"

try {
    if (branchName == '') {
        branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    }
    if (branchName.contains("/"))
        branchName = branchName.replace("/", "_")
    if (branchName.contains("-"))
        branchName = branchName.replace("-", "_")

    def commitHashString = "git log --format=\"%H\" -n 1".execute().text
    commitHash = commitHashString.substring(1, commitHashString.length() - 2)

    println SEPARATOR
    println "BRANCH NAME: " + branchName
    println "COMMIT HASH: " + commitHash
    println "BUILD TIME: " + buildTime
    println SEPARATOR

} catch (Exception ignored) {
    println "Git not found"
    println SEPARATOR
}

android {
    signingConfigs {
        release {
            keyAlias 'key0'
            keyPassword KEY_PASSWORD
            storeFile file(project.rootDir.path + '/keys/android.jks')
            storePassword KEYSTORE_PASSWORD
        }
    }
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION.toInteger()

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = defaultApplicationId
        manifestPlaceholders = [appName: "${defaultAppName}"]

        buildConfigField("String", "APP_VERSION_NAME", "\"${appVersionName}\"")
        buildConfigField("String", "APP_VERSION_CODE", "\"${appVersionCode}\"")
        buildConfigField("String", "BRANCH_NAME", "\"${branchName}\"")
        buildConfigField("String", "COMMIT_HASH", "\"${commitHash}\"")
        buildConfigField("String", "BUILD_TIME", "\"${buildTime}\"")

        applicationVariants.all { variant ->
            def fileName = "--V" + variant.versionName + "--" + branchName + ".apk"
            variant.outputs.each { output ->
                output.outputFileName = output.outputFileName.replace(".apk", fileName)
            }
        }

        multiDexEnabled true

        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION.toInteger()
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION.toInteger()
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            useProguard true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            proguardFile '/Users/arjun/AndroidStudioProjects/deeper/app/proguard-rules.pro'
            manifestPlaceholders = [appNameSuffix: ""]
        }

        debug {
            manifestPlaceholders = [appNameSuffix: " v${appVersionName}"]
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
        }
    }
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.gms:play-services-games:19.0.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation "androidx.appcompat:appcompat:${project.ANDROIDX_SUPPORT_LIB_VERSION}"
    implementation "androidx.legacy:legacy-support-v4:${project.ANDROIDX_SUPPORT_LIB_VERSION}"
    implementation "com.google.android.material:material:${project.ANDROIDX_SUPPORT_LIB_VERSION}"
    implementation "androidx.gridlayout:gridlayout:${project.ANDROIDX_SUPPORT_LIB_VERSION}"
    implementation 'com.google.firebase:firebase-analytics:17.2.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Stetho
    implementation 'com.facebook.stetho:stetho:1.5.0'

    // Butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'

    // Lombok
    //    compileOnly 'org.projectlombok:lombok:1.18.2'
    //    annotationProcessor 'org.projectlombok:lombok:1.18.2'

    // Carbon
    implementation 'tk.zielony:carbon:0.16.0.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // EventBus
    implementation 'org.greenrobot:eventbus:3.1.1'

    // Konfetti
    implementation 'nl.dionsegijn:konfetti:1.1.2'
}

repositories {
    mavenCentral()
}

// Needs to be the last line to enable this for all flavours and build variants
apply plugin: 'com.google.gms.google-services'